<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on nametake.info</title>
    <link>https://nametake.github.io/tags/react/</link>
    <description>Recent content in React on nametake.info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Dec 2019 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://nametake.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hooks対応したreact-tableをTypeScriptで使う</title>
      <link>https://nametake.github.io/posts/2019/12/16/react-table/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://nametake.github.io/posts/2019/12/16/react-table/</guid>
      <description>この記事はReact Advent Calendar 2019の記事です。
みなさまテーブルComponentは作成していますか?
サービスにもよるとは思いますが、業務系のサービスではほぼ確実に登場するUIです。
しかも、よく登場する上にたくさんの機能を求められるUIでもあります。パッと思いつく限りでも、ソート、フィルター、検索、ページネーション等多岐にわたります。
これらの機能はUIと分離して1から作るは大変です。あり物のUIライブラリのテーブルComponentにオリジナルのスタイルを当てるという手もありますが、それだとUIライブラリの仕様に引っ張られたり、UIとロジックの分離がうまくできなかったりすることがあります。
そこで、今回は「テーブルで必要になる機能」だけをHooksとし、UIとロジックを完全に分離できるるreact-table v7を紹介しようと思います。
注意点 この記事執筆時点ではreact-table自体はRCになっていますが、react-tableの型定義はまだマージされていません。
https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40816
また、議論の末、現段階最新バージョンのrc.9ではreact-table側で型定義を管理しないことになっています。
そのため、この記事の紹介ではTypeScriptを使って紹介をする都合上、以下のコマンドで入るバージョンを使用して紹介をします。
yarn add react-table@7.0.0-beta.23 大きく使い勝手が変わるようなことはないと思いますが、react-tableは開発が活発なため、この記事の内容が陳腐化している可能性があります。
本番で使う際は必ず公式のドキュメントを参照してください。
シンプルなテーブル まずは最もシンプルにテーブルを表示する例です。
import * as React from &amp;#39;react&amp;#39;; import { render } from &amp;#39;react-dom&amp;#39;; import { useTable, Column } from &amp;#39;react-table&amp;#39;; import &amp;#39;./styles.css&amp;#39;; const columns: Column&amp;lt;Data&amp;gt;[] = [ { Header: &amp;#39;名前&amp;#39;, accessor: &amp;#39;name&amp;#39; }, { Header: &amp;#39;年齢&amp;#39;, accessor: &amp;#39;age&amp;#39; } ]; interface Data { name: string; age: number; } const data: Data[] = [ { name: &amp;#39;John&amp;#39;, age: 23 }, { name: &amp;#39;Jane&amp;#39;, age: 26 } ]; function App() { const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable&amp;lt;Data&amp;gt;({ columns, data }); return ( &amp;lt;table {.</description>
    </item>
    
    <item>
      <title>FormikとYupを使った動的フォームのバリデーション</title>
      <link>https://nametake.github.io/posts/2019/06/05/formik-yup-dynamic-validation/</link>
      <pubDate>Wed, 05 Jun 2019 23:50:36 +0900</pubDate>
      
      <guid>https://nametake.github.io/posts/2019/06/05/formik-yup-dynamic-validation/</guid>
      <description>Formikで動的なFormを作った時に、表示されるFormに応じてYupのバリデーションを切り替える方法でちょっと手間取ったのでメモ。
結論から言うとYup.lazy()を使って遅延評価されるValidationSchemaを使えば解決した。Yup.lazy()に渡ってくるFormの値を元にValidationwSchemaを表示されるFormに対応したValidationSchemaを返せば狙った挙動が実現できました。
サンプルコードは以下。
 </description>
    </item>
    
    <item>
      <title>TypeScript&#43;React&#43;Reduxチュートリアル</title>
      <link>https://nametake.github.io/posts/2018/12/05/typescript-react-redux-tutorial/</link>
      <pubDate>Wed, 05 Dec 2018 11:08:00 +0900</pubDate>
      
      <guid>https://nametake.github.io/posts/2018/12/05/typescript-react-redux-tutorial/</guid>
      <description>普段は Go でサーバサイドのコードを書いているのですが、TypeScript+React+Redux を勉強する機会がありました。
その際、巷に溢れているチュートリアルやサンプルコードで型で縛っているものが少なすぎて、理解にかなり苦労したので自分なりに Todo アプリケーションを作るチュートリアルを書いておきます。
このチュートリアルは以下のことを意識して書かれています。
 引数や返り値は型で縛る  データフローの理解を重視する   外部ライブラリは以下の 3 つしか import しない  react redux react-redux   標準の設計になるべく則る  また、この記事では以下のことについては深く言及はしません
 nodeのツールのエコシステム TypeScript の記法 JSX の記法 React+Redux の概念  プロジェクトの準備 まずはプロジェクトを準備します。
node と yarn は入っている前提で進めます。
Facebook が公式で用意しているアプリケーション作成ツールを使用してプロジェクトテンプレートを作ります。
npx create-react-app todo-app --scripts-version=react-scripts-ts 次にプロジェクトのディレクトリに移動して以下のツールをインストールします。
cd todo-app yarn add redux react-redux yarn add -D @types/redux @types/react-redux @types がついているパッケージは、/以下のパッケージの型情報が記述されているパッケージです。開発時しか使用しないので-Dオプションを付けてインストールします。
以下のコマンドでローカルサーバが立ち上がり、ブラウザに画面が表示されれば問題ありません。
yarn start チュートリアルのコードは作成されたプロジェクト内部の src ディレクトリに記述していきます。
Component の実装 何はともあれ何かが表示されてないとモチベーションが上がらないのでブラウザに見た目を表示させます。</description>
    </item>
    
  </channel>
</rss>