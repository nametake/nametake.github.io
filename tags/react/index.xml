<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on nametake.dev</title>
    <link>https://nametake.dev/tags/react/</link>
    <description>Recent content in React on nametake.dev</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 25 Oct 2020 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://nametake.dev/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>react-resizableにemotionでスタイルを当てる</title>
      <link>https://nametake.dev/posts/2020/10/25/react-resizable-emotion/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2020/10/25/react-resizable-emotion/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/STRML/react-resizable&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;react-resizable&lt;/a&gt; に &lt;a href=&#34;https://emotion.sh/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emotion&lt;/a&gt; でスタイルを当てた時のメモ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;ResizableBox&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react-resizable&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StyledResizableBox&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;styled&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ResizableBox&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;`&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  position: relative;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  display: inline-flex;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  flex-direction: column;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  align-items: right;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  justify-content: center;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  padding-left: 20px;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  overflow: hidden;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  border: 1px solid black;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  .react-resizable-handle {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    position: absolute;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    right: 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    width: 4px;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    height: 90%;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    border-left: 1px solid black;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :hover {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      cursor: col-resize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記の例だと以下のように右端にサイズ変更用のバーが出るようなスタイルになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reactでアクセシビリティを維持したRadioボタンをデザインする</title>
      <link>https://nametake.dev/posts/2020/09/26/react-a11y-radio/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2020/09/26/react-a11y-radio/</guid>
      <description>&lt;p&gt;ReactでRadioボタンにデザインを当てようとすると、 &lt;code&gt;display: none&lt;/code&gt; を使う方法を紹介している記事が多いが、その方法ではアクセシビリティが消えてしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TypeScript &#43; electron-webpackでemotionを動かしたときのメモ</title>
      <link>https://nametake.dev/posts/2020/08/04/typescript-electron-webpack-emotion/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2020/08/04/typescript-electron-webpack-emotion/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/electron-userland/electron-webpack&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;electron-webpack&lt;/a&gt; で &lt;a href=&#34;https://github.com/emotion-js/emotion&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emotion&lt;/a&gt; を動かそうとして試行錯誤したのでその結果のメモ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ライブラリとバージョン&#34;&gt;&#xA;  ライブラリとバージョン&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%81%a8%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TypeScript&lt;/a&gt;(3.9.5)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/electron-userland/electron-webpack&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;electron-webpack&lt;/a&gt;(2.8.2)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/emotion-js/emotion&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emotion&lt;/a&gt;(10.0.27)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/TypeStrong/ts-loader&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ts-loader&lt;/a&gt;(7.0.5)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/babel/babel-loader&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;babel-loader&lt;/a&gt;(8.1.0)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;babel-plugin-emotion&lt;/a&gt;(10.0.33)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;起きた問題&#34;&gt;&#xA;  起きた問題&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%b5%b7%e3%81%8d%e3%81%9f%e5%95%8f%e9%a1%8c&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;styled-componentsのselectorに別のComponentsを指定しようとしたときに、 &lt;code&gt;babel-plugin-emotion&lt;/code&gt; が必要というエラーが発生した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TypeScriptでFormのComponentを配列で管理する</title>
      <link>https://nametake.dev/posts/2020/01/31/ts-array-form-onchange/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2020/01/31/ts-array-form-onchange/</guid>
      <description>&lt;h1 id=&#34;typescriptでformのcomponentを配列で管理する&#34;&gt;&#xA;  TypeScriptでFormのComponentを配列で管理する&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#typescript%e3%81%a7form%e3%81%aecomponent%e3%82%92%e9%85%8d%e5%88%97%e3%81%a7%e7%ae%a1%e7%90%86%e3%81%99%e3%82%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;toB向けのサービスや管理画面のように情報量の多いのプロダクトを作っていると、FormをまとめたComponentを作りたくなるケースがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hooks対応したreact-tableをTypeScriptで使う</title>
      <link>https://nametake.dev/posts/2019/12/17/react-table/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://nametake.dev/posts/2019/12/17/react-table/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2019/react&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Advent Calendar 2019&lt;/a&gt;の記事。&lt;/p&gt;&#xA;&lt;!-- textlint-disable ja-technical-writing/ja-no-weak-phrase --&gt;&#xA;&lt;p&gt;サービスにもよるとは思うが、業務系のサービスではテーブルUIはほぼ確実に登場する。&lt;/p&gt;&#xA;&lt;!-- textlint-enable --&gt;&#xA;&lt;p&gt;しかも、よく登場する上にたくさんの機能を求められるUIでもある。&#xA;パッと思いつく限りでも、ソート、フィルター、検索、ページネーション等多岐にわたる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FormikとYupを使った動的フォームのバリデーション</title>
      <link>https://nametake.dev/posts/2019/06/05/formik-yup-dynamic-validation/</link>
      <pubDate>Wed, 05 Jun 2019 23:50:36 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/06/05/formik-yup-dynamic-validation/</guid>
      <description>&lt;p&gt;Formikで動的なFormを作った時に、表示されるFormに応じてYupのバリデーションを切り替える方法でちょっと手間取ったのでメモ。&lt;/p&gt;&#xA;&lt;p&gt;結論から言うと&lt;code&gt;Yup.lazy()&lt;/code&gt;を使って遅延評価されるValidationSchemaを使えば解決した。&lt;code&gt;Yup.lazy()&lt;/code&gt;に渡ってくるFormの値を元にValidationwSchemaを表示されるFormに対応したValidationSchemaを返せば狙った挙動が実現できた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TypeScript&#43;React&#43;Reduxチュートリアル</title>
      <link>https://nametake.dev/posts/2018/12/05/typescript-react-redux-tutorial/</link>
      <pubDate>Wed, 05 Dec 2018 11:08:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2018/12/05/typescript-react-redux-tutorial/</guid>
      <description>&lt;p&gt;普段は Go でサーバサイドのコードを書いているが、TypeScript+React+Redux を勉強する機会があった。&lt;/p&gt;&#xA;&lt;p&gt;その際、巷のチュートリアルやサンプルコードは型で縛っているものが少なく、理解にかなり苦労したので自分なりの Todo アプリケーションを作るチュートリアルを書いておく。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
