<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on nametake.dev</title>
    <link>https://nametake.dev/tags/typescript/</link>
    <description>Recent content in TypeScript on nametake.dev</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 13 Jul 2020 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://nametake.dev/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conditional Typesを使った話</title>
      <link>https://nametake.dev/posts/2020/07/13/conditional-types/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2020/07/13/conditional-types/</guid>
      <description>&lt;p&gt;機能としては知っていたものの使う機会がなかった Conditional Types を使ったのでメモ。&lt;/p&gt;&#xA;&lt;p&gt;ElectronのMainプロセスでAPIを叩く際、API毎にchannelを用意するのは手間だと思い以下のようなIPC通信用の型を用意した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TypeScriptでFormのComponentを配列で管理する</title>
      <link>https://nametake.dev/posts/2020/01/31/ts-array-form-onchange/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2020/01/31/ts-array-form-onchange/</guid>
      <description>&lt;h1 id=&#34;typescriptでformのcomponentを配列で管理する&#34;&gt;&#xA;  TypeScriptでFormのComponentを配列で管理する&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#typescript%e3%81%a7form%e3%81%aecomponent%e3%82%92%e9%85%8d%e5%88%97%e3%81%a7%e7%ae%a1%e7%90%86%e3%81%99%e3%82%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;toB向けのサービスや管理画面のように情報量の多いのプロダクトを作っていると、FormをまとめたComponentを作りたくなるケースがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TypeScirptのプロジェクトにエイリアスを設定して絶対パスでimportするメモ</title>
      <link>https://nametake.dev/posts/2019/10/07/typescript-absolute-imports/</link>
      <pubDate>Mon, 07 Oct 2019 00:15:35 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/10/07/typescript-absolute-imports/</guid>
      <description>&lt;!-- textlint-disable ja-technical-writing/ja-no-weak-phrase --&gt;&#xA;&lt;p&gt;TypeScriptのプロジェクトを作る度に設定すると思うのでメモ。&lt;/p&gt;&#xA;&lt;!-- textlint-enable --&gt;&#xA;&lt;h2 id=&#34;前提&#34;&gt;&#xA;  前提&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%89%8d%e6%8f%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Webpackでプロジェクトを管理している&lt;/li&gt;&#xA;&lt;li&gt;Linterはeslintを使用している&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;tsconfigjsonの設定&#34;&gt;&#xA;  tsconfig.jsonの設定&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tsconfigjson%e3%81%ae%e8%a8%ad%e5%ae%9a&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;tsconfig.jsonのcompilerOptionsを設定してsrc以下のディレクトリに対してエイリアスを貼る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FormikとYupを使った動的フォームのバリデーション</title>
      <link>https://nametake.dev/posts/2019/06/05/formik-yup-dynamic-validation/</link>
      <pubDate>Wed, 05 Jun 2019 23:50:36 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/06/05/formik-yup-dynamic-validation/</guid>
      <description>&lt;p&gt;Formikで動的なFormを作った時に、表示されるFormに応じてYupのバリデーションを切り替える方法でちょっと手間取ったのでメモ。&lt;/p&gt;&#xA;&lt;p&gt;結論から言うと&lt;code&gt;Yup.lazy()&lt;/code&gt;を使って遅延評価されるValidationSchemaを使えば解決した。&lt;code&gt;Yup.lazy()&lt;/code&gt;に渡ってくるFormの値を元にValidationwSchemaを表示されるFormに対応したValidationSchemaを返せば狙った挙動が実現できた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type SafeなReducerの書き方</title>
      <link>https://nametake.dev/posts/2019/05/18/type-safe-reducer/</link>
      <pubDate>Sat, 18 May 2019 10:38:55 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/05/18/type-safe-reducer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../../posts/2018/12/05/typescript-react-redux-tutorial/&#34; &gt;以前書いた記事&lt;/a&gt;で書いたReducerでは、受け取ったActionの型を判別するために、&lt;code&gt;switch&lt;/code&gt;で分岐した後に対応したActionの型でキャストをする必要があった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TypeScript&#43;React&#43;Reduxチュートリアル</title>
      <link>https://nametake.dev/posts/2018/12/05/typescript-react-redux-tutorial/</link>
      <pubDate>Wed, 05 Dec 2018 11:08:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2018/12/05/typescript-react-redux-tutorial/</guid>
      <description>&lt;p&gt;普段は Go でサーバサイドのコードを書いているが、TypeScript+React+Redux を勉強する機会があった。&lt;/p&gt;&#xA;&lt;p&gt;その際、巷のチュートリアルやサンプルコードは型で縛っているものが少なく、理解にかなり苦労したので自分なりの Todo アプリケーションを作るチュートリアルを書いておく。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
