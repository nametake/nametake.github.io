<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on nametake.dev</title>
    <link>https://nametake.dev/tags/go/</link>
    <description>Recent content in Go on nametake.dev</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 07 Dec 2024 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://nametake.dev/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024年に作ったGoのSpanner関連のツール</title>
      <link>https://nametake.dev/posts/2024/12/07/spanner-tools/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2024/12/07/spanner-tools/</guid>
      <description>&lt;p&gt;2024年はGoでSpannerを扱うにあたっていくつかツールを作ったので、せっかくなのでアドベントカレンダーに投稿してみる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;go-zetasqlfmthttpsgithubcomnametakego-zetasqlfmt&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/nametake/go-zetasqlfmt&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-zetasqlfmt&lt;/a&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#go-zetasqlfmthttpsgithubcomnametakego-zetasqlfmt&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;弊社プロダクトではGoからSpannerを扱うにあたって &lt;a href=&#34;https://pkg.go.dev/cloud.google.com/go/spanner&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cloud.google.com/go/spanner&lt;/a&gt; を素で使っているが、SQLの部分が文字列なので書き手によってフォーマットが異なってしまっていた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go-zetasqlfmt-actionを作った</title>
      <link>https://nametake.dev/posts/2024/07/21/go-zetasqlfmt-action/</link>
      <pubDate>Sun, 21 Jul 2024 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2024/07/21/go-zetasqlfmt-action/</guid>
      <description>&lt;p&gt;以前、spanner.StatementのSQLの文字列をフォーマットするために、&lt;a href=&#34;https://github.com/nametake/go-zetasqlfmt&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-zetasqlfmt&lt;/a&gt;というCLIを作った。&lt;/p&gt;&#xA;&lt;p&gt;便利に使えていたが、使用している&lt;a href=&#34;https://github.com/goccy/go-zetasql&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-zetasql&lt;/a&gt;がCGOでzetasqlをBindingしている都合上、少々ビルドに時間がかかってしまう。&lt;/p&gt;&#xA;&lt;p&gt;そのため、CI上で &lt;code&gt;go run&lt;/code&gt; を使って気軽に利用しようとするとCIの時間がかかってしまう問題があった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでStacktraceを取るためのコード</title>
      <link>https://nametake.dev/posts/2024/07/13/go-stacktrace-frame/</link>
      <pubDate>Sat, 13 Jul 2024 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2024/07/13/go-stacktrace-frame/</guid>
      <description>&lt;p&gt;最近社内でGoのStacktraceを取る方法が話題に上がったので備忘録としてブログにしてみる。&lt;/p&gt;&#xA;&lt;p&gt;Goでは標準機能としてスタックトレースを取る方法を提供していない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gqlgo/gqlanalysisを使ったコマンドで独自引数を指定する</title>
      <link>https://nametake.dev/posts/2024/02/21/gqlanalysis-flags/</link>
      <pubDate>Wed, 21 Feb 2024 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2024/02/21/gqlanalysis-flags/</guid>
      <description>&lt;p&gt;GraphQLの静的解析をCLIで作りやすくしてくれるgqlgo/gqlanalysisというライブラリがある。&lt;/p&gt;&#xA;&lt;p&gt;go/analysisを使ったことがあればそれと殆ど同じ使い方ができるため非常に便利だが、CLIに引数を渡すときにハマったのでその備忘録。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのコード内のZetaSQLをフォーマットするツールを作った</title>
      <link>https://nametake.dev/posts/2024/01/13/go-zetasqlfmt/</link>
      <pubDate>Sat, 13 Jan 2024 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2024/01/13/go-zetasqlfmt/</guid>
      <description>&lt;p&gt;GoからSpannerのQueryを実行しようとすると&lt;a href=&#34;https://pkg.go.dev/cloud.google.com/go/spanner#Statement&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cloud.google.com/go/spannerのStatement&lt;/a&gt;構造体のSQLフィールドに文字列として記述することになる。&lt;/p&gt;&#xA;&lt;p&gt;シンプルに文字列でしか無いため、書き方やフォーマットを統一できずに若干のもやもやがあった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go/packagesでformatterを作る</title>
      <link>https://nametake.dev/posts/2024/01/08/use-go-packages/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2024/01/08/use-go-packages/</guid>
      <description>&lt;p&gt;特定の構造体の文字列を置き換えるFormatterを作ったときに&lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/packages&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go/packages&lt;/a&gt;を使って作ってみたので備忘録。&lt;/p&gt;&#xA;&lt;h2 id=&#34;全体の流れ&#34;&gt;&#xA;  全体の流れ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%a8%e4%bd%93%e3%81%ae%e6%b5%81%e3%82%8c&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/packages#Load&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;packages.Load&lt;/a&gt;を使ってパッケージ情報を読み込む&lt;/li&gt;&#xA;&lt;li&gt;読み込んだ&lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/packages#Package&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;packages.Package&lt;/a&gt;からast.File(Syntax)と型情報(TypesInfo)を取り出す&lt;/li&gt;&#xA;&lt;li&gt;ファイルごとに置き換え処理&lt;/li&gt;&#xA;&lt;li&gt;保存&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;packagesloadでパッケージ情報の読み込み&#34;&gt;&#xA;  packages.Loadでパッケージ情報の読み込み&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#packagesload%e3%81%a7%e3%83%91%e3%83%83%e3%82%b1%e3%83%bc%e3%82%b8%e6%83%85%e5%a0%b1%e3%81%ae%e8%aa%ad%e3%81%bf%e8%be%bc%e3%81%bf&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/packages#Load&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;packages.Load&lt;/a&gt; は指定したパターンからパッケージの情報を読み込める。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goの関数定義の引数をチェックするLinterを作った</title>
      <link>https://nametake.dev/posts/2024/01/01/mustargs/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2024/01/01/mustargs/</guid>
      <description>&lt;p&gt;チームでWebサービスを書いていると特定の条件の関数には特定の型の引数を渡すことがルールになっていくことがある。&lt;/p&gt;&#xA;&lt;p&gt;例えば、マルチテナントなアプリケーションを作っている場合、UsecaseはTenantIDを必ず引数として持ったり、DBの定義には必ず*sql.Txを持つ等がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Protocol Buffersのgo_packageの;の仕様</title>
      <link>https://nametake.dev/posts/2020/05/24/protobuf-go-package-semicolon/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2020/05/24/protobuf-go-package-semicolon/</guid>
      <description>&lt;p&gt;先日&lt;a href=&#34;https://github.com/nametake/protoc-gen-gohttp&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protoc-gen-gohttp&lt;/a&gt;の依存パッケージをしようと思って色々触っていたら以下のようなWARNINGが出てきた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/05/24 11:36:51 WARNING: Deprecated use of &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go_package&amp;#39;&lt;/span&gt; option without a full import path in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;greeter.proto&amp;#34;&lt;/span&gt;, please specify:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        option go_package &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.;main&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A future release of protoc-gen-go will require the import path be specified.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;See https://developers.google.com/protocol-buffers/docs/reference/go-generated#package &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more information.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下のファイルのように &lt;code&gt;go_package&lt;/code&gt; のオプションにGoのimport pathを記述しなかったことが問題だった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golangci-lint-langserverを作った話</title>
      <link>https://nametake.dev/posts/2020/03/08/golangci-lint-langserver/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2020/03/08/golangci-lint-langserver/</guid>
      <description>&lt;p&gt;最近VimのLinterのプラグインをaleからすべてlanguage serverに移行した。&lt;/p&gt;&#xA;&lt;p&gt;殆どのCLIツールは&lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;diagnostic-languageserver&lt;/a&gt;経由で使うことでいい感じに動いてくれている。&lt;/p&gt;&#xA;&lt;p&gt;ただ、&lt;a href=&#34;https://github.com/golangci/golangci-lint&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golangci-lint&lt;/a&gt;だけはGoのスコープとの相性の関係ではうまく動作させることができなかった。&lt;/p&gt;&#xA;&lt;p&gt;そこで、golangci-lint専用のlanguage server、&lt;a href=&#34;https://github.com/nametake/golangci-lint-langserver&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golangci-lint-langserver&lt;/a&gt;を作成してみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go言語でジェネリクスない理由の考察</title>
      <link>https://nametake.dev/posts/2019/12/31/go-no-generics/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/12/31/go-no-generics/</guid>
      <description>&lt;!-- textlint-disable ja-technical-writing/ja-no-weak-phrase --&gt;&#xA;&lt;p&gt;Go言語にはジェネリクスがない。&lt;/p&gt;&#xA;&lt;p&gt;他言語から入ってきた方はかなりこの部分に戸惑うことが多い。&lt;/p&gt;&#xA;&lt;p&gt;そこで、そういった方々になぜジェネリクスがないのかを説明するにあたって、自分の中でいい感じに言語化できたのでログとして残しておこうと思う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goの関数内で呼び出される関数をインターセプトする方法</title>
      <link>https://nametake.dev/posts/2019/12/09/go-func-intercept/</link>
      <pubDate>Mon, 09 Dec 2019 00:05:29 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/12/09/go-func-intercept/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2019/go2&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go2 Advent Calendar 2019&lt;/a&gt;の記事。&lt;/p&gt;&#xA;&lt;p&gt;自分は&lt;a href=&#34;https://github.com/nametake/protoc-gen-gohttp&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protoc-gen-gohttp&lt;/a&gt;というプラグインを作っているが、先日&lt;a href=&#34;https://godoc.org/google.golang.org/grpc#UnaryServerInterceptor&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc.UnaryServerInterceptor&lt;/a&gt;に対応した。&lt;/p&gt;&#xA;&lt;!-- textlint-disable ja-technical-writing/ja-no-weak-phrase --&gt;&#xA;&lt;p&gt;その際、どうやればいいかを調査していたら、&lt;a href=&#34;https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware#ChainUnaryServer&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ChainUnaryServer&lt;/a&gt;という関数を見つけた。&#xA;中身を読んでみると、特定のinterfaceを受け取ってそれを実行する機能を持った関数に対し、interfaceを実行するときに複数の関数でインターセプトする方法の知見を得られたのため記事にしようと思う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go1.13のerrorsにWrapの機能が入ったので勉強がてらまとめる</title>
      <link>https://nametake.dev/posts/2019/10/30/unwrap-interface/</link>
      <pubDate>Wed, 30 Oct 2019 00:52:57 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/10/30/unwrap-interface/</guid>
      <description>&lt;p&gt;Go1.13からerrorsに色々機能が入った(&lt;a href=&#34;https://blog.golang.org/go1.13-errors&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Go Blog&lt;/a&gt;)。&lt;/p&gt;&#xA;&lt;p&gt;最近は新しいGoのことをインプットできていなかったので、リハビリがてら&lt;a href=&#34;https://qiita.com/sonatard/items/9c9faf79ac03c20f4ae1&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sonatardさんのまとめた記事&lt;/a&gt;も読みつつ、中の実装を眺めてまとめてみる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;unwrap-interface&#34;&gt;&#xA;  Unwrap interface&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#unwrap-interface&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;追加された機能は &lt;code&gt;errors.As&lt;/code&gt; や &lt;code&gt;errors.Is&lt;/code&gt; のようにいくつかあるが、一番のキモとなる追加機能は &lt;code&gt;errors.Unwrap&lt;/code&gt; になる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのreflectで構造体の変数にインスタンスを詰める方法</title>
      <link>https://nametake.dev/posts/2019/09/10/go-reflect-create-instance/</link>
      <pubDate>Tue, 10 Sep 2019 13:39:29 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/09/10/go-reflect-create-instance/</guid>
      <description>&lt;p&gt;構造体の変数にreflectでインスタンスを詰める方法メモ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;------------&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// nilにアクセスしようとするのでエラー&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// foo.msg = &amp;#34;Hello&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// fooの型を取得&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;typ&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Elem&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// fooの型の実体を生成&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;typ&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Interface&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// foo変数への参照を取得&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ValueOf&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Elem&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;typ&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// main.Foo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;amp;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;------------&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// foo変数の参照に実体化したfooの型のを設定&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ValueOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;typ&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// main.Foo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;amp;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;amp;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;------------&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// 生成した変数はすべて同じ構造体を参照している&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;amp;{Hello}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;amp;{Hello}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;amp;{Hello}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記ではわかりやすく分割しているが、以下のように一行で書くことも可能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>protoc-gen-gohttpをHttpRule Optionに対応させた</title>
      <link>https://nametake.dev/posts/2019/08/30/protoc-gen-gohttp-httprule/</link>
      <pubDate>Fri, 30 Aug 2019 01:52:26 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/08/30/protoc-gen-gohttp-httprule/</guid>
      <description>&lt;p&gt;以前、Protocol Buffersのserviceの定義を利用してGoの&lt;code&gt;net/http&lt;/code&gt;で利用できるようにするための&lt;a href=&#34;https://github.com/nametake/protoc-gen-gohttp&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protoc-gen-gohttp&lt;/a&gt;というprotocのプラグインを&lt;a href=&#34;../../posts/2018/11/21/protoc-gen-gohttp/&#34; &gt;作成した&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;しかし、protoc-gen-gohttpではURLのパス部分の定義はProtocol Buffersの定義には記述できないため、クライアント側がProtocol Buffersを見ただけでパスを読み取ることができない。&#xA;また、生成されたコードはHTTPのBodyしか参照しないため、情報を取得するだけのときもHTTPのメソッドをPOSTにする必要もあった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goの戻り値をいい感じに補完してくれるvim-snippetsを作った</title>
      <link>https://nametake.dev/posts/2019/07/29/vim-goiferr-snippets/</link>
      <pubDate>Mon, 29 Jul 2019 22:57:06 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/07/29/vim-goiferr-snippets/</guid>
      <description>&lt;p&gt;最近Vimの設定を整理してcoc.nvimに乗り換えるにあたり、snippetのプラグインもneosnippetからcoc-neosnippetに乗り換え、snippet集もvim-snippetsに変更した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>labelerrとsuberrを作った話をLTしてきた</title>
      <link>https://nametake.dev/posts/2018/12/19/created-labelerr-and-suberr/</link>
      <pubDate>Wed, 19 Dec 2018 11:37:17 +0900</pubDate>
      <guid>https://nametake.dev/posts/2018/12/19/created-labelerr-and-suberr/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golangtokyo.connpass.com/event/111077/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.tokyo #20&lt;/a&gt;のLT大会で、&lt;a href=&#34;https://github.com/nametake/labelerr&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;labelerr&lt;/a&gt;と&lt;a href=&#34;https://github.com/nametake/suberr&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;suberr&lt;/a&gt;を作った話をしてきた。&lt;/p&gt;&#xA;&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;602fca666f904e18a307698694e248da&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&#xA;&lt;!-- textlint-disable ja-technical-writing/ja-no-weak-phrase --&gt;&#xA;&lt;p&gt;「Goのerrorは1種類というのは綺麗だとは思うけど、実運用上errorに重み付けをしたいよね」ってところからこのライブラリの出発点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでのprotocプラグインのテストの書き方</title>
      <link>https://nametake.dev/posts/2018/12/14/protoc-plugin-test/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2018/12/14/protoc-plugin-test/</guid>
      <description>&lt;p&gt;最近周りでProtocol Buffersの話題をよく聞くようになった。&lt;/p&gt;&#xA;&lt;p&gt;ということは、そろそろ人類はprotocのプラグインを書きたくなる時代がやってくるはず。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Protocol Buffersのserviceをnet/httpに対応させるprotoc-gen-gohttpを作った</title>
      <link>https://nametake.dev/posts/2018/11/21/protoc-gen-gohttp/</link>
      <pubDate>Wed, 21 Nov 2018 16:32:07 +0900</pubDate>
      <guid>https://nametake.dev/posts/2018/11/21/protoc-gen-gohttp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/nametake/protoc-gen-gohttp&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nametake/protoc-gen-gohttp&lt;/a&gt;という&lt;code&gt;protoc&lt;/code&gt;のプラグインを作ったのでその話。&lt;/p&gt;&#xA;&lt;h2 id=&#34;protocol-buffersとは&#34;&gt;&#xA;  Protocol Buffersとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#protocol-buffers%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Protocol Buffersはインターフェース定義言語の1つでGoogleによって開発されている(ざっくりいうと、JSONやXMLの仲間)。以下のように、構造を表す&lt;code&gt;message&lt;/code&gt;とその&lt;code&gt;message&lt;/code&gt;を使ったRPCのインターフェースの&lt;code&gt;service&lt;/code&gt;というものを定義できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GCPの認証済みのhttp.Clientの取得方法</title>
      <link>https://nametake.dev/posts/2018/11/09/auth-gcp-client/</link>
      <pubDate>Fri, 09 Nov 2018 11:15:24 +0900</pubDate>
      <guid>https://nametake.dev/posts/2018/11/09/auth-gcp-client/</guid>
      <description>&lt;p&gt;GCPの認証済みのhttp.Clientが欲しいときにちょっとだけ調べたのでメモ。&lt;/p&gt;&#xA;&lt;p&gt;結論だけ言うと、&lt;a href=&#34;https://godoc.org/golang.org/x/oauth2/google#DefaultClient&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.org/x/oauth2/googleのDefaultClient&lt;/a&gt;を使えばよかった。&lt;/p&gt;&#xA;&lt;p&gt;今回はDataflowのAPIを叩きたかったので以下のようにすればできた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>depでprivateリポジトリがupdateできなかったときの解決策</title>
      <link>https://nametake.dev/posts/2018/09/20/dep-private-repo/</link>
      <pubDate>Thu, 20 Sep 2018 18:47:46 +0900</pubDate>
      <guid>https://nametake.dev/posts/2018/09/20/dep-private-repo/</guid>
      <description>&lt;p&gt;Goをアップデートした後、&lt;code&gt;dep update&lt;/code&gt;をしたら以下のようなエラーが発生した。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grouped write of manifest, lock and vendor: error while writing out vendor tree: failed to write dep tree: failed to export github.com/nametake/private-repo: unable to update repository: remote: Repository not found.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fatal: repository &amp;#39;https://github.com/nametake/private-repo/&amp;#39; not found&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;: command failed: [git fetch --tags --prune origin]: exit status 128&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make: *** [dep] Error 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原因はprivateリポジトリをhttps経由でcloneしようとしたことだった。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
