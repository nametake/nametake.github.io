<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Protocol Buffers on nametake.dev</title>
    <link>https://nametake.dev/tags/protocol-buffers/</link>
    <description>Recent content in Protocol Buffers on nametake.dev</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 24 May 2020 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://nametake.dev/tags/protocol-buffers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Protocol Buffersのgo_packageの;の仕様</title>
      <link>https://nametake.dev/posts/2020/05/24/protobuf-go-package-semicolon/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2020/05/24/protobuf-go-package-semicolon/</guid>
      <description>&lt;p&gt;先日&lt;a href=&#34;https://github.com/nametake/protoc-gen-gohttp&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protoc-gen-gohttp&lt;/a&gt;の依存パッケージをしようと思って色々触っていたら以下のようなWARNINGが出てきた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/05/24 11:36:51 WARNING: Deprecated use of &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go_package&amp;#39;&lt;/span&gt; option without a full import path in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;greeter.proto&amp;#34;&lt;/span&gt;, please specify:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        option go_package &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.;main&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A future release of protoc-gen-go will require the import path be specified.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;See https://developers.google.com/protocol-buffers/docs/reference/go-generated#package &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more information.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下のファイルのように &lt;code&gt;go_package&lt;/code&gt; のオプションにGoのimport pathを記述しなかったことが問題だった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>protoc-gen-gohttpをHttpRule Optionに対応させた</title>
      <link>https://nametake.dev/posts/2019/08/30/protoc-gen-gohttp-httprule/</link>
      <pubDate>Fri, 30 Aug 2019 01:52:26 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/08/30/protoc-gen-gohttp-httprule/</guid>
      <description>&lt;p&gt;以前、Protocol Buffersのserviceの定義を利用してGoの&lt;code&gt;net/http&lt;/code&gt;で利用できるようにするための&lt;a href=&#34;https://github.com/nametake/protoc-gen-gohttp&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protoc-gen-gohttp&lt;/a&gt;というprotocのプラグインを&lt;a href=&#34;../../posts/2018/11/21/protoc-gen-gohttp/&#34; &gt;作成した&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;しかし、protoc-gen-gohttpではURLのパス部分の定義はProtocol Buffersの定義には記述できないため、クライアント側がProtocol Buffersを見ただけでパスを読み取ることができない。&#xA;また、生成されたコードはHTTPのBodyしか参照しないため、情報を取得するだけのときもHTTPのメソッドをPOSTにする必要もあった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Protocol Buffersを使ったAPIでのNullの設計</title>
      <link>https://nametake.dev/posts/2019/08/17/protobuf-null-api/</link>
      <pubDate>Sat, 17 Aug 2019 10:44:03 +0900</pubDate>
      <guid>https://nametake.dev/posts/2019/08/17/protobuf-null-api/</guid>
      <description>&lt;h2 id=&#34;protocol-buffersのnullの取り扱いの問題&#34;&gt;&#xA;  Protocol BuffersのNullの取り扱いの問題&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#protocol-buffers%e3%81%aenull%e3%81%ae%e5%8f%96%e3%82%8a%e6%89%b1%e3%81%84%e3%81%ae%e5%95%8f%e9%a1%8c&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Protocol Buffersのproto3の仕様ではmessageの中の値をOptionalで表現する記法がない。&#xA;値を詰めずに送ると入れ子の値が&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto3#default&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;デフォルト値&lt;/a&gt;になってしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでのprotocプラグインのテストの書き方</title>
      <link>https://nametake.dev/posts/2018/12/14/protoc-plugin-test/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0900</pubDate>
      <guid>https://nametake.dev/posts/2018/12/14/protoc-plugin-test/</guid>
      <description>&lt;p&gt;最近周りでProtocol Buffersの話題をよく聞くようになった。&lt;/p&gt;&#xA;&lt;p&gt;ということは、そろそろ人類はprotocのプラグインを書きたくなる時代がやってくるはず。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Protocol Buffersのserviceをnet/httpに対応させるprotoc-gen-gohttpを作った</title>
      <link>https://nametake.dev/posts/2018/11/21/protoc-gen-gohttp/</link>
      <pubDate>Wed, 21 Nov 2018 16:32:07 +0900</pubDate>
      <guid>https://nametake.dev/posts/2018/11/21/protoc-gen-gohttp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/nametake/protoc-gen-gohttp&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nametake/protoc-gen-gohttp&lt;/a&gt;という&lt;code&gt;protoc&lt;/code&gt;のプラグインを作ったのでその話。&lt;/p&gt;&#xA;&lt;h2 id=&#34;protocol-buffersとは&#34;&gt;&#xA;  Protocol Buffersとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#protocol-buffers%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Protocol Buffersはインターフェース定義言語の1つでGoogleによって開発されている(ざっくりいうと、JSONやXMLの仲間)。以下のように、構造を表す&lt;code&gt;message&lt;/code&gt;とその&lt;code&gt;message&lt;/code&gt;を使ったRPCのインターフェースの&lt;code&gt;service&lt;/code&gt;というものを定義できる。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
